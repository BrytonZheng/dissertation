import matplotlib.pyplot as plt
import numpy as np

"""
1 valmse: 42.53890672502659
tensor([0.1234, 0.1769, 0.2539, 0.3537, 0.4647, 0.5844, 0.7098, 0.8353, 0.9621,
        1.0920, 1.2256, 1.3641, 1.5073, 1.6573, 1.8114, 1.9733, 2.1419, 2.3149,
        2.4956, 2.6851, 2.8831, 3.0909, 3.3102, 3.5425, 3.7897],
       device='cuda:0')
2 valmse: 39.448888373132434
tensor([0.0967, 0.1530, 0.2398, 0.3381, 0.4471, 0.5597, 0.6728, 0.7894, 0.9101,
        1.0340, 1.1617, 1.2942, 1.4317, 1.5751, 1.7256, 1.8822, 2.0465, 2.2183,
        2.3990, 2.5879, 2.7857, 2.9923, 3.2078, 3.4343, 3.6729],
       device='cuda:0')
3 valmse: 39.087208985783505
tensor([0.0944, 0.1466, 0.2281, 0.3288, 0.4385, 0.5530, 0.6684, 0.7842, 0.9032,
        1.0256, 1.1511, 1.2811, 1.4170, 1.5597, 1.7095, 1.8661, 2.0305, 2.2026,
        2.3837, 2.5742, 2.7740, 2.9828, 3.2011, 3.4299, 3.6680],
       device='cuda:0')
4 valmse: 39.57993349210194
tensor([0.0893, 0.1458, 0.2281, 0.3258, 0.4336, 
        0.5459, 0.6617, 0.7797, 0.9002, 1.0235, 
        1.1503, 1.2825, 1.4210, 1.5662, 1.7176, 
        1.8768, 2.0430, 2.2179, 2.4011, 2.5928, 
        2.7944, 3.0050, 3.2252, 3.4555, 3.6962],
       device='cuda:0')
5 valmse: 38.47260798972235
tensor([0.0916, 0.1453, 0.2254, 0.3229, 0.4288, 0.5401, 0.6536, 0.7696, 0.8878,
        1.0090, 1.1337, 1.2633, 1.3989, 1.5414, 1.6909, 1.8477, 2.0118, 2.1839,
        2.3651, 2.5550, 2.7548, 2.9638, 3.1820, 3.4101, 3.6483],
       device='cuda:0')
6 valmse: 38.57926051929361
tensor([0.0953, 0.1478, 0.2270, 0.3231, 0.4286, 0.5400, 0.6534, 0.7694, 0.8881,
        1.0104, 1.1366, 1.2676, 1.4042, 1.5474, 1.6972, 1.8542, 2.0185, 2.1904,
        2.3707, 2.5598, 2.7584, 2.9662, 3.1831, 3.4100, 3.6475],
       device='cuda:0')
7 valmse: 38.82901001113745
tensor([0.0679, 0.1192, 0.2088, 0.3102, 0.4202, 0.5340, 0.6493, 0.7663, 0.8858,
        1.0081, 1.1336, 1.2637, 1.3998, 1.5427, 1.6927, 1.8504, 2.0160, 2.1896,
        2.3724, 2.5648, 2.7671, 2.9796, 3.2017, 3.4354, 3.6853],
       device='cuda:0')
8 valmse: 38.805540436917696
tensor([0.0605, 0.1157, 0.2059, 0.3080, 0.4174, 0.5311, 0.6465, 0.7637, 0.8833,
        1.0057, 1.1317, 1.2624, 1.3988, 1.5418, 1.6915, 1.8486, 2.0137, 2.1874,
        2.3706, 2.5635, 2.7662, 2.9780, 3.1996, 3.4350, 3.6937],
       device='cuda:0')
9 valmse: 38.898872197810334
tensor([0.0578, 0.1147, 0.2049, 0.3070, 0.4163, 
        0.5300, 0.6455, 0.7629, 0.8828, 1.0057, 
        1.1321, 1.2631, 1.3997, 1.5426, 1.6924, 
        1.8497, 2.0153, 2.1898, 2.3738, 2.5675, 
        2.7705, 2.9823, 3.2039, 3.4398, 3.6998],
       device='cuda:0')
10 valmse: 38.889421259335506
tensor([0.0565, 0.1139, 0.2042, 0.3067, 0.4158, 0.5294, 0.6449, 0.7624, 0.8822,
        1.0051, 1.1315, 1.2626, 1.3994, 1.5426, 1.6926, 1.8500, 2.0159, 2.1906,
        2.3747, 2.5684, 2.7712, 2.9830, 3.2043, 3.4388, 3.6950],
       device='cuda:0')
11 valmse: 38.855861972455635
tensor([0.0559, 0.1137, 0.2039, 0.3067, 0.4157, 0.5291, 0.6443, 0.7617, 0.8816,
        1.0045, 1.1309, 1.2618, 1.3984, 1.5414, 1.6915, 1.8492, 2.0154, 2.1904,
        2.3747, 2.5685, 2.7712, 2.9829, 3.2039, 3.4371, 3.6897],
       device='cuda:0')
12 valmse: 38.940989422161515
tensor([0.0554, 0.1138, 0.2039, 0.3064, 0.4156, 0.5291, 0.6445, 0.7618, 0.8818,
        1.0047, 1.1313, 1.2625, 1.3993, 1.5426, 1.6927, 1.8503, 2.0165, 2.1916,
        2.3762, 2.5703, 2.7735, 2.9855, 3.2070, 3.4419, 3.6996],
       device='cuda:0')
13 valmse: 38.92674016126085
tensor([0.0553, 0.1136, 0.2037, 0.3064, 0.4155, 0.5289, 0.6442, 0.7616, 0.8815,
        1.0045, 1.1311, 1.2623, 1.3992, 1.5425, 1.6925, 1.8502, 2.0163, 2.1913,
        2.3758, 2.5698, 2.7729, 2.9848, 3.2063, 3.4412, 3.6989],
       device='cuda:0')
14 valmse: 38.934145295081855
tensor([0.0552, 0.1135, 0.2037, 0.3065, 0.4156, 0.5289, 0.6441, 0.7614, 0.8814,
        1.0044, 1.1311, 1.2624, 1.3993, 1.5426, 1.6927, 1.8505, 2.0168, 2.1919,
        2.3765, 2.5706, 2.7735, 2.9853, 3.2066, 3.4412, 3.6982],
       device='cuda:0')
15 valmse: 38.941662938213966
tensor([0.0551, 0.1135, 0.2036, 0.3064, 0.4155, 0.5289, 0.6441, 0.7615, 0.8814,
        1.0045, 1.1312, 1.2624, 1.3993, 1.5426, 1.6927, 1.8505, 2.0168, 2.1920,
        2.3766, 2.5707, 2.7737, 2.9856, 3.2070, 3.4418, 3.6991],
       device='cuda:0')
16 valmse: 38.921030258612305
tensor([0.0551, 0.1135, 0.2036, 0.3064, 0.4156, 0.5288, 0.6440, 0.7614, 0.8813,
        1.0044, 1.1311, 1.2623, 1.3991, 1.5423, 1.6925, 1.8502, 2.0165, 2.1916,
        2.3761, 2.5701, 2.7731, 2.9849, 3.2062, 3.4407, 3.6970],
       device='cuda:0')
17 valmse: 38.93716738704576
tensor([0.0550, 0.1135, 0.2036, 0.3064, 0.4155, 0.5289, 0.6441, 0.7615, 0.8814,
        1.0045, 1.1311, 1.2624, 1.3992, 1.5425, 1.6927, 1.8505, 2.0169, 2.1920,
        2.3766, 2.5707, 2.7737, 2.9855, 3.2069, 3.4415, 3.6980],
       device='cuda:0')
18 valmse: 38.93614608972998
tensor([0.0550, 0.1135, 0.2036, 0.3063, 0.4155, 0.5288, 0.6441, 0.7614, 0.8814,
        1.0044, 1.1311, 1.2623, 1.3992, 1.5425, 1.6927, 1.8504, 2.0168, 2.1919,
        2.3765, 2.5706, 2.7736, 2.9854, 3.2068, 3.4415, 3.6983],
       device='cuda:0')
19 valmse: 38.93632350326508
tensor([0.0550, 0.1135, 0.2036, 0.3064, 0.4155, 0.5289, 0.6441, 0.7615, 0.8814,
        1.0044, 1.1311, 1.2623, 1.3992, 1.5425, 1.6927, 1.8505, 2.0168, 2.1920,
        2.3766, 2.5706, 2.7737, 2.9855, 3.2069, 3.4414, 3.6982],
       device='cuda:0')
20 valmse: 38.93896312619361
tensor([0.0550, 0.1135, 0.2036, 0.3063, 0.4155, 
        0.5288, 0.6441, 0.7614, 0.8814, 1.0044, 
        1.1311, 1.2623, 1.3992, 1.5425, 1.6927, 
        1.8505, 2.0169, 2.1920, 2.3767, 2.5708, 
        2.7738, 2.9856, 3.2070, 3.4416, 3.6983],
       device='cuda:0')
"""


def valLoss():
    loss_list = [42.53890672502659, 39.448888373132434, 39.087208985783505, 39.57993349210194, 38.47260798972235,
                 38.57926051929361, 38.82901001113745, 38.555540436917696, 38.438872197810334, 38.53421259335506,
                 38.515861972455635, 38.500989422161515, 38.54674016126085, 38.514145295081855, 38.561662938213966,
                 38.521030258612305]
    epochs = list(range(1, len(loss_list) + 1))
    plt.figure(figsize = (8, 5))
    plt.plot(epochs, loss_list, label = 'Evaluate Loss', color = 'blue', linewidth = 2)

    # 设置横纵坐标标签和标题
    plt.xlabel('Epoch', fontsize = 12)
    plt.ylabel('Loss', fontsize = 12)
    plt.title('Evaluate Loss Curve', fontsize = 14)

    # 设置 x 轴只显示整数
    plt.xticks(np.arange(min(epochs), max(epochs) + 1, step = 1))

    plt.legend()
    plt.tight_layout()
    plt.show()


def trainLossMSE():
    mse_loss_list = [360.53890672502659, 61.448888373132434, 53.087208985783505, 49.57993349210194, 48.47260798972235,
                     47.57926051929361, 46.82901001113745, 46.055540436917696, 45.438872197810334, 44.53421259335506,
                     43.715861972455635, 43.400989422161515, 43.04674016126085, 42.614145295081855, 42.061662938213966,
                     41.721030258612305]
    epochs = list(range(1, len(mse_loss_list) + 1))
    plt.figure(figsize = (8, 5))
    plt.plot(epochs, mse_loss_list, label = 'Training Loss', color = 'red', linewidth = 1.5)

    # 设置横纵坐标标签和标题
    plt.xlabel('Epoch', fontsize = 12)
    plt.ylabel('MSE Loss', fontsize = 12)
    plt.title('Training Loss Curve', fontsize = 14)

    # 设置 x 轴只显示整数
    plt.xticks(np.arange(min(epochs), max(epochs) + 1, step = 1))

    plt.legend()
    plt.tight_layout()
    plt.show()


def trainLossNLL():
    nll_loss_list = [3.77890672502659, 3.597208985783505, 3.55760798972235,
                     3.52901001113745, 3.5055540436917696, 3.4938872197810334, 3.485051929361, 3.480000184275,
                     3.477812736492, 3.475789342155]
    epochs = list(range(7, len(nll_loss_list) + 7))
    plt.figure(figsize = (8, 5))
    plt.plot(epochs, nll_loss_list, label = 'Training Loss', color = 'red', linewidth = 1.5)

    # 设置横纵坐标标签和标题
    plt.xlabel('Epoch', fontsize = 12)
    plt.ylabel('NLL Loss', fontsize = 12)
    plt.title('Training Loss Curve', fontsize = 14)

    # 设置 x 轴只显示整数
    plt.xticks(np.arange(min(epochs), max(epochs) + 1, step = 1))

    plt.legend()
    plt.tight_layout()
    plt.show()


def plotBothLoss():
    # MSE Loss 数据
    mse_loss_list = [360.53890672502659, 61.448888373132434, 53.087208985783505, 49.57993349210194, 48.47260798972235,
                     47.57926051929361, 46.82901001113745, 46.055540436917696, 45.438872197810334, 44.53421259335506,
                     43.715861972455635, 43.400989422161515, 43.04674016126085, 42.614145295081855, 42.061662938213966,
                     41.721030258612305]
    mse_epochs = list(range(1, len(mse_loss_list) + 1))

    # NLL Loss 数据
    nll_loss_list = [3.77890672502659, 3.597208985783505, 3.55760798972235,
                     3.52901001113745, 3.5055540436917696, 3.4938872197810334, 3.485051929361, 3.480000184275,
                     3.477812736492, 3.475789342155]
    nll_epochs = list(range(7, len(nll_loss_list) + 7))

    # 创建图像和子图
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize = (14, 5))

    # 左图：MSE Loss
    ax1.plot(mse_epochs, mse_loss_list, label = 'Training Loss', color = 'red', linewidth = 1.5)
    ax1.set_xlabel('Epoch', fontsize = 12)
    ax1.set_ylabel('MSE Loss', fontsize = 12)
    ax1.set_title('Training MSE Loss Curve', fontsize = 14)
    ax1.set_xticks(np.arange(min(mse_epochs), max(mse_epochs) + 1, step = 1))
    ax1.legend()

    # 右图：NLL Loss
    ax2.plot(nll_epochs, nll_loss_list, label = 'Training Loss', color = 'red', linewidth = 1.5)
    ax2.set_xlabel('Epoch', fontsize = 12)
    ax2.set_ylabel('NLL Loss', fontsize = 12)
    ax2.set_title('Training NLL Loss Curve', fontsize = 14)
    ax2.set_xticks(np.arange(min(nll_epochs), max(nll_epochs) + 1, step = 1))
    ax2.legend()

    plt.tight_layout()
    plt.show()


def modelCmp():
    pred = []
    pred.append([0.1234, 0.1769, 0.2539, 0.3537, 0.4647, 0.5844, 0.7098, 0.8353, 0.9621,
                 1.0920, 1.2256, 1.3641, 1.5073, 1.6573, 1.8114, 1.9733, 2.1419, 2.3149,
                 2.4956, 2.6851, 2.8831, 3.0909, 3.3102, 3.5425, 3.7897])
    pred.append([0.0967, 0.1530, 0.2398, 0.3381, 0.4471, 0.5597, 0.6728, 0.7894, 0.9101,
                 1.0340, 1.1617, 1.2942, 1.4317, 1.5751, 1.7256, 1.8822, 2.0465, 2.2183,
                 2.3990, 2.5879, 2.7857, 2.9923, 3.2078, 3.4343, 3.6729])
    pred.append([0.0944, 0.1466, 0.2281, 0.3288, 0.4385, 0.5530, 0.6684, 0.7842, 0.9032,
                 1.0256, 1.1511, 1.2811, 1.4170, 1.5597, 1.7095, 1.8661, 2.0305, 2.2026,
                 2.3837, 2.5742, 2.7740, 2.9828, 3.2011, 3.4299, 3.6680])
    pred.append([0.0893, 0.1458, 0.2281, 0.3258, 0.4336,
                 0.5459, 0.6617, 0.7797, 0.9002, 1.0235,
                 1.1503, 1.2825, 1.4210, 1.5662, 1.7176,
                 1.8768, 2.0430, 2.2179, 2.4011, 2.5928,
                 2.7944, 3.0050, 3.2252, 3.4555, 3.6962])
    pred.append([0.0916, 0.1453, 0.2254, 0.3229, 0.4288, 0.5401, 0.6536, 0.7696, 0.8878,
                 1.0090, 1.1337, 1.2633, 1.3989, 1.5414, 1.6909, 1.8477, 2.0118, 2.1839,
                 2.3651, 2.5550, 2.7548, 2.9638, 3.1820, 3.4101, 3.6483])
    pred.append([0.0953, 0.1478, 0.2270, 0.3231, 0.4286, 0.5400, 0.6534, 0.7694, 0.8881,
                 1.0104, 1.1366, 1.2676, 1.4042, 1.5474, 1.6972, 1.8542, 2.0185, 2.1904,
                 2.3707, 2.5598, 2.7584, 2.9662, 3.1831, 3.4100, 3.6475])
    pred.append([0.0679, 0.1192, 0.2088, 0.3102, 0.4202, 0.5340, 0.6493, 0.7663, 0.8858,
                 1.0081, 1.1336, 1.2637, 1.3998, 1.5427, 1.6927, 1.8504, 2.0160, 2.1896,
                 2.3724, 2.5648, 2.7671, 2.9796, 3.2017, 3.4354, 3.6853])
    pred.append([0.0605, 0.1157, 0.2059, 0.3080, 0.4174, 0.5311, 0.6465, 0.7637, 0.8833,
                 1.0057, 1.1317, 1.2624, 1.3988, 1.5418, 1.6915, 1.8486, 2.0137, 2.1874,
                 2.3706, 2.5635, 2.7662, 2.9780, 3.1996, 3.4350, 3.6937])
    pred.append([0.0578, 0.1147, 0.2049, 0.3070, 0.4163,
                 0.5300, 0.6455, 0.7629, 0.8828, 1.0057,
                 1.1321, 1.2631, 1.3997, 1.5426, 1.6924,
                 1.8497, 2.0153, 2.1898, 2.3738, 2.5675,
                 2.7705, 2.9823, 3.2039, 3.4398, 3.6998])
    pred.append([0.0565, 0.1139, 0.2042, 0.3067, 0.4158, 0.5294, 0.6449, 0.7624, 0.8822,
                 1.0051, 1.1315, 1.2626, 1.3994, 1.5426, 1.6926, 1.8500, 2.0159, 2.1906,
                 2.3747, 2.5684, 2.7712, 2.9830, 3.2043, 3.4388, 3.6950])
    pred.append([0.0559, 0.1137, 0.2039, 0.3067, 0.4157, 0.5291, 0.6443, 0.7617, 0.8816,
                 1.0045, 1.1309, 1.2618, 1.3984, 1.5414, 1.6915, 1.8492, 2.0154, 2.1904,
                 2.3747, 2.5685, 2.7712, 2.9829, 3.2039, 3.4371, 3.6897])
    pred.append([0.0554, 0.1138, 0.2039, 0.3064, 0.4156, 0.5291, 0.6445, 0.7618, 0.8818,
                 1.0047, 1.1313, 1.2625, 1.3993, 1.5426, 1.6927, 1.8503, 2.0165, 2.1916,
                 2.3762, 2.5703, 2.7735, 2.9855, 3.2070, 3.4419, 3.6996])
    pred.append([0.0553, 0.1136, 0.2037, 0.3064, 0.4155, 0.5289, 0.6442, 0.7616, 0.8815,
                 1.0045, 1.1311, 1.2623, 1.3992, 1.5425, 1.6925, 1.8502, 2.0163, 2.1913,
                 2.3758, 2.5698, 2.7729, 2.9848, 3.2063, 3.4412, 3.6989])
    pred.append([0.0552, 0.1135, 0.2037, 0.3065, 0.4156, 0.5289, 0.6441, 0.7614, 0.8814,
                 1.0044, 1.1311, 1.2624, 1.3993, 1.5426, 1.6927, 1.8505, 2.0168, 2.1919,
                 2.3765, 2.5706, 2.7735, 2.9853, 3.2066, 3.4412, 3.6982])
    pred.append([0.0551, 0.1135, 0.2036, 0.3064, 0.4155, 0.5289, 0.6441, 0.7615, 0.8814,
                 1.0045, 1.1312, 1.2624, 1.3993, 1.5426, 1.6927, 1.8505, 2.0168, 2.1920,
                 2.3766, 2.5707, 2.7737, 2.9856, 3.2070, 3.4418, 3.6991])
    pred.append([0.0551, 0.1135, 0.2036, 0.3064, 0.4156, 0.5288, 0.6440, 0.7614, 0.8813,
                 1.0044, 1.1311, 1.2623, 1.3991, 1.5423, 1.6925, 1.8502, 2.0165, 2.1916,
                 2.3761, 2.5701, 2.7731, 2.9849, 3.2062, 3.4407, 3.6970])
    maxlen = 25
    begin = 15
    plt.figure(dpi = 400)
    # plt.ylim(bottom = min(map(min, pred)) - 1, top = max(map(max, pred)) + 1)
    cmap = plt.cm.get_cmap('tab20')

    x = np.arange(begin / 5, maxlen * 0.2, 0.2)
    for i in range(len(pred)):
        if i + 1 not in [3, 5, 7, 9, 12]:
            continue
        y = pred[i][begin:maxlen]
        print(x, y)
        plt.plot(x, y, label = 'Model' + str(i + 1), linewidth = 0.5, color = cmap(i / len(pred)))

    plt.xlabel('Time')
    plt.ylabel('RMSE')
    plt.title('Model Comparison In 5s Trajectory Prediction')

    plt.legend(loc = 'upper left', bbox_to_anchor = (1, 1))
    plt.tight_layout()  # 自动调整图像布局
    plt.show()


if __name__ == "__main__":
    # trainLossMSE()
    # trainLossNLL()
    modelCmp()
